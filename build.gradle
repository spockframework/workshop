plugins {
    id 'groovy'
    id 'org.kordamp.gradle.guide' version '0.31.2'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

repositories {
    mavenCentral()
}

ext {
    groovyVersion = '2.5.9'
}

dependencies {
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    // optional dependencies for using Spock
    testImplementation 'org.hamcrest:hamcrest-core:1.3' // only necessary if Hamcrest matchers are used
    testRuntimeOnly 'net.bytebuddy:byte-buddy:1.10.7'   // allows mocking of classes (in addition to interfaces)
    testRuntimeOnly 'org.objenesis:objenesis:3.1'       // allows mocking of classes without default constructor

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'
}

test {
    useJUnitPlatform()
}

configurations.all {
    resolutionStrategy.eachDependency {
        // Since Groovy 2.5 does not provide a bom, we have to override the versions this way
        if (requested.group == 'org.codehaus.groovy' && requested.name.startsWith('groovy')) {
            // Can be omitted, internally Gradle will keep the same version, but mark as modified
            if (requested.version != groovyVersion) {
                useVersion(groovyVersion)
            }
        }
    }
}

config {
    info {
        name        = 'Spock-Workshop'
        vendor      = 'Spock Framework Team'
        description = 'A logical way of testing'

        links {
            website      = 'https://github.com/spockframework/workshop'
            issueTracker = 'https://github.com/spockframework/workshop/issues'
            scm          = 'https://github.com/spockframework/workshop.git'
        }

        people {
            person {
                id    = 'leonard84'
                name  = 'Leonard Br√ºnings'
                roles = ['developer']
            }
            person {
                id    = 'mkutz'
                name  = 'Michael Kutz'
                roles = ['developer']
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }
}

asciidoctorj {
    modules {
        diagram.use()
    }
}


